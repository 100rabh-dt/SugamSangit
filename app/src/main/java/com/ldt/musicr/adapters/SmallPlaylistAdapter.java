package com.ldt.musicr.adapters;

import android.app.Activity;
import android.content.Context;
import android.content.res.ColorStateList;
import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.RippleDrawable;
import android.os.AsyncTask;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.AnimationUtils;
import android.widget.ImageView;
import android.widget.TextView;

import com.ldt.musicr.InternalTools.AutoGeneratedPlaylistBitmap;
import com.ldt.musicr.InternalTools.Tool;
import com.ldt.musicr.R;
import com.ldt.musicr.activities.SupportFragmentPlusActivity;
import com.ldt.musicr.dataloaders.LastAddedLoader;
import com.ldt.musicr.dataloaders.PlaylistSongLoader;
import com.ldt.musicr.dataloaders.SongLoader;
import com.ldt.musicr.dataloaders.TopTracksLoader;
import com.ldt.musicr.fragments.PlaylistPagerFragment;
import com.ldt.musicr.models.Playlist;
import com.ldt.musicr.models.Song;
import com.ldt.musicr.utils.TimberUtils;

import java.util.List;

import mehdi.sakout.fancybuttons.FancyButton;

public class SmallPlaylistAdapter extends RecyclerView.Adapter<SmallPlaylistAdapter.ItemHolder> {
    private static final String TAG = "SmallPlaylistAdapter";
    public List<Playlist> arraylist;
    private Activity mContext;
    private boolean showAuto;
    private int songCountInt;
    private long firstAlbumID=-1;

    public SmallPlaylistAdapter(Activity mContext, List<Playlist> arraylist,boolean showAuto) {
        this.arraylist = arraylist;
        this.mContext = mContext;
        this.showAuto = showAuto;
    }

    @Override
    public ItemHolder onCreateViewHolder(ViewGroup viewGroup,int i) {
       View v = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item_playlists_recycler_view,viewGroup,false);
       ItemHolder ml = new ItemHolder(v);
       return ml;
    }
    @Override
    public void onBindViewHolder(final ItemHolder itemHolder,int i) {
        if(i==0) {
            ((TextView)mContext.findViewById(R.id.playlist_count)).setText(arraylist.size()+"");
        }
        // Lấy item Playlist thứ i
        final Playlist localItem = arraylist.get(i);
        // tên tương ứng
        itemHolder.title.setText(localItem.name);
        itemHolder.position = i;
        // lấy uri của art
        Log.d(TAG, "one");

        new AsyncTask<Void,Void,Bitmap>() {
            @Override
            protected void onPostExecute(Bitmap bitmap) {
                itemHolder.art.setImageBitmap(bitmap);
            }

            @Override
            protected Bitmap doInBackground(Void... v) {
                List<Song> l =getPlaylistWithListId(i,localItem.id);
                return AutoGeneratedPlaylistBitmap.getBitmap(mContext,l,true,false);
            }
        }.execute();

        /*
        String s = getPlaylistArtUri(i,localItem.id);
         */

        // ???
        Log.d(TAG,"two");
        itemHolder.art.setTag(firstAlbumID);
      /*
        if(!s.equals("nosongs")&&!s.equals(""))
        ImageLoader.getInstance().loadImage(s, new ImageLoadingListener() {
            @Override
            public void onLoadingStarted(String imageUri, View view) {

            }

            @Override
            public void onLoadingFailed(String imageUri, View view, FailReason failReason) {

            }

            @Override
            public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {

            new AsyncTask<Bitmap, Void,Bitmap >(){
                @Override
                protected void onPostExecute(Bitmap bitmap) {
                    if(bitmap==null) return;
                    itemHolder.art.setImageBitmap(bitmap);
                }

                @Override
                protected Bitmap doInBackground(Bitmap... b) {
                    if(b[0]==null ) b[0] = BitmapFactory.decodeResource(mContext.getResources(),R.drawable.default_image2).copy(Bitmap.Config.ARGB_8888,false);
                    return BitmapEditor.getRoundedCornerBitmap(b[0], b[0].getWidth()/40);
                }
            }.execute(loadedImage);     }

            @Override
            public void onLoadingCancelled(String imageUri, View view) {

            }
        });
        */
        if(TimberUtils.isLollipop()) itemHolder.art.setTransitionName("transition_album_art"+i);
    }
    @Override
    public int getItemCount() {
        return (null != arraylist ? arraylist.size() : 0);
    }

    public void updateDataSet(List<Playlist> arraylist) {
        this.arraylist.clear();
        this.arraylist.addAll(arraylist);
        notifyDataSetChanged();
    }
    public  List<Song> getPlaylistWithListId(int position, long id) {
        if(mContext!=null) {
            firstAlbumID = -1;
            if(showAuto) {
                switch (position) {
                    case 0: return  LastAddedLoader.getLastAddedSongs(mContext);
                    case 1:
                        TopTracksLoader recentloader = new TopTracksLoader(mContext,TopTracksLoader.QueryType.RecentSongs);
                        return SongLoader.getSongsForCursor(TopTracksLoader.getCursor());
                    case 2:
                        TopTracksLoader topTracksLoader = new TopTracksLoader(mContext,TopTracksLoader.QueryType.TopTracks);
                        return SongLoader.getSongsForCursor(TopTracksLoader.getCursor());
                    default:
                        return PlaylistSongLoader.getSongsInPlaylist(mContext, id);
                }
            } else PlaylistSongLoader.getSongsInPlaylist(mContext, id);
        }
        return null;
    }
    public static List<Song> getPlaylistWithListID(Context mContext,int position,long id) {
        if(mContext!=null) {
            if(true) {
                switch (position) {
                    case 0: return  LastAddedLoader.getLastAddedSongs(mContext);
                    case 1:
                        TopTracksLoader recentloader = new TopTracksLoader(mContext,TopTracksLoader.QueryType.RecentSongs);
                        return SongLoader.getSongsForCursor(TopTracksLoader.getCursor());
                    case 2:
                        TopTracksLoader topTracksLoader = new TopTracksLoader(mContext,TopTracksLoader.QueryType.TopTracks);
                        return SongLoader.getSongsForCursor(TopTracksLoader.getCursor());
                    default:
                        return PlaylistSongLoader.getSongsInPlaylist(mContext, id);
                }
            } else PlaylistSongLoader.getSongsInPlaylist(mContext, id);
        }
        return null;
    }
    private String getPlaylistArtUri(int position, long id) {
        if (mContext != null) {
            firstAlbumID = -1;
            if (showAuto) {
                switch (position) {
                    case 0:
                        List<Song> lastAddedSongs = LastAddedLoader.getLastAddedSongs(mContext);
                        songCountInt = lastAddedSongs.size();

                        if (songCountInt != 0) {
                            firstAlbumID = lastAddedSongs.get(0).albumId;
                            return TimberUtils.getAlbumArtUri(firstAlbumID).toString();
                        } else return "nosongs";
                    case 1:
                        TopTracksLoader recentloader = new TopTracksLoader(mContext, TopTracksLoader.QueryType.RecentSongs);
                        List<Song> recentsongs = SongLoader.getSongsForCursor(TopTracksLoader.getCursor());
                        songCountInt = recentsongs.size();

                        if (songCountInt != 0) {
                            firstAlbumID = recentsongs.get(0).albumId;
                            return TimberUtils.getAlbumArtUri(firstAlbumID).toString();
                        } else return "nosongs";
                    case 2:
                        TopTracksLoader topTracksLoader = new TopTracksLoader(mContext, TopTracksLoader.QueryType.TopTracks);
                        List<Song> topsongs = SongLoader.getSongsForCursor(TopTracksLoader.getCursor());
                        songCountInt = topsongs.size();

                        if (songCountInt != 0) {
                            firstAlbumID = topsongs.get(0).albumId;
                            return TimberUtils.getAlbumArtUri(firstAlbumID).toString();
                        } else return "nosongs";
                    default:
                        List<Song> playlistsongs = PlaylistSongLoader.getSongsInPlaylist(mContext, id);
                        songCountInt = playlistsongs.size();

                        if (songCountInt != 0) {
                            firstAlbumID = playlistsongs.get(0).albumId;
                            return TimberUtils.getAlbumArtUri(firstAlbumID).toString();
                        } else return "nosongs";

                }
            } else {
                List<Song> playlistsongs = PlaylistSongLoader.getSongsInPlaylist(mContext, id);
                songCountInt = playlistsongs.size();

                if (songCountInt != 0) {
                    firstAlbumID = playlistsongs.get(0).albumId;
                    return TimberUtils.getAlbumArtUri(firstAlbumID).toString();
                } else return "nosongs";
            }
        }
        return null;
    }
    public static class MyBounceInterpolator implements android.view.animation.Interpolator {
        private double mAmplitude = 1;
        private double mFrequency = 10;

        public MyBounceInterpolator(double amplitude, double frequency) {
            mAmplitude = amplitude;
            mFrequency = frequency;
        }

        public float getInterpolation(float time) {
            return (float) (-1 * Math.pow(Math.E, -time / mAmplitude) *
                    Math.cos(mFrequency * time) + 1);
        }
    }

    public class ItemHolder extends RecyclerView.ViewHolder implements View.OnClickListener,View.OnTouchListener{
        protected TextView title;
        protected ImageView art;
        protected View view_over;
        protected View root;
        protected int currentColor=0;
        protected int position;
        public ItemHolder(View view) {
            super(view);
            root = view;
            this.title = view.findViewById(R.id.playlist_title);
            this.art = view.findViewById(R.id.playlist_image);
            view_over = view.findViewById(R.id.playlist_over);
            view_over.setOnClickListener(this);
            view_over.setOnTouchListener(this);
        }
        @Override
        public void onClick(View v) {
            //Todo: Navigate to playlist detail
            final android.view.animation.Animation myAnim = AnimationUtils.loadAnimation(mContext, R.anim.bounce_slow);
            MyBounceInterpolator interpolator = new MyBounceInterpolator(0.1, 30);
            myAnim.setInterpolator(interpolator);
            v.startAnimation(myAnim);
                    ((SupportFragmentPlusActivity) mContext).pushFragment(PlaylistPagerFragment.Initialize(mContext,arraylist.get(position),position,null), true);

         //   root.startAnimation(myAnim);
        }

        @Override
        public boolean onTouch(View view, MotionEvent motionEvent) {
            if(currentColor!=Tool.getSurfaceColor()) {
                currentColor = Tool.getSurfaceColor();
                ((RippleDrawable) view_over.getBackground()).setColor(ColorStateList.valueOf(Tool.getSurfaceColor()));
            }
            return false;
        }
    }

}
