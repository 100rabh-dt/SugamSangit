package com.ldt.musicr.fragments;

import android.app.Activity;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.design.widget.CollapsingToolbarLayout;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import com.ldt.musicr.InternalTools.AutoGeneratedPlaylistBitmap;
import com.ldt.musicr.InternalTools.Tool;
import com.ldt.musicr.R;
import com.ldt.musicr.activities.SupportFragmentPlusActivity;
import com.ldt.musicr.adapters.SmallPlaylistAdapter;
import com.ldt.musicr.adapters.SmallSongListAdapter;
import com.ldt.musicr.listeners.MusicStateListener;
import com.ldt.musicr.models.Album;
import com.ldt.musicr.models.Playlist;
import com.ldt.musicr.models.Song;

import java.util.List;

import mehdi.sakout.fancybuttons.FancyButton;

public class PlaylistPagerFragment extends FragmentPlus implements MusicStateListener {
    @Override
    public void onTransitionComplete() {

    }
    String Title, Artist;
    List<Song> arraylist;
    public void set(List<Song> list,String title,String artist) {
        this.arraylist = list;
        this.Title = title;
        this.Artist = artist;
    }
    @Override
    public StatusTheme setDefaultStatusTheme() {
        return StatusTheme.BlackIcon;
    }

    @Override
    public void restartLoader() {

    }

    @Override
    public void onPlaylistChanged() {

    }

    @Override
    public void onMetaChanged() {

    }

    @Override
    public void onArtWorkChanged() {

    }

    public enum ListType {
        ALBUM,PLAYLIST
    }
    ListType type;
    Playlist playlist;
    Album album;
    int position;
    public static PlaylistPagerFragment Initialize(Activity activity, Playlist playlist, int position, @Nullable Bitmap bitmap)
    {
        PlaylistPagerFragment fragment = new PlaylistPagerFragment();
        fragment.setFrameLayoutNTransitionType(activity, SupportFragmentPlusActivity.TransitionType.RIGHT_LEFT);
     fragment.type =ListType.PLAYLIST;
     fragment.playlist = playlist;
     fragment.position = position;
     if(bitmap!=null) fragment.bitmap = bitmap;
        return fragment;
    }
    public static PlaylistPagerFragment Initialize(Activity activity, Album album, int position, @Nullable Bitmap bitmap)
    {
        PlaylistPagerFragment fragment = new PlaylistPagerFragment();
        fragment.setFrameLayoutNTransitionType(activity, SupportFragmentPlusActivity.TransitionType.RIGHT_LEFT);
        fragment.type = ListType.ALBUM;
        fragment.album = album;
        fragment.position = position;
        if(bitmap!= null) fragment.bitmap = bitmap;
        return fragment;
    }
    RecyclerView recyclerView;
    SmallSongListAdapter songListAdapter;
    ImageView backArtView, artView;
    TextView titleView,artistView;
    Bitmap bitmap;
    Toolbar toolbar;
    FancyButton randomButton;
    View back_relative;
    CollapsingToolbarLayout collapsingToolbarLayout;
    float oneDp;
    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        oneDp = Tool.getOneDps(getContext());
        rootView = inflater.inflate( R.layout.playlist_pager_v2,container,false);
        recyclerView = rootView.findViewById(R.id.playlist_big_rv);
        backArtView = rootView.findViewById(R.id.back_art);
        artView = rootView.findViewById(R.id.Art);
        titleView = rootView.findViewById(R.id.Title);
        artistView = rootView.findViewById(R.id.artistText);

        titleView.setShadowLayer(oneDp*5,0,0,Color.BLACK);
        artistView.setShadowLayer(oneDp*5,0,0,Color.BLACK);

        toolbar = rootView.findViewById(R.id.toolbar);
        collapsingToolbarLayout = rootView.findViewById(R.id.playlist_pager_collapsing_toolbar);
        randomButton = rootView.findViewById(R.id.random_button);
        back_relative = rootView.findViewById(R.id.background_relative);
        setupToolbar();
        int surface = Tool.getSurfaceColor();
        int heavy_surface = Tool.getHeavyColor();
        titleView.setTextColor(heavy_surface);
        artistView.setTextColor(heavy_surface);
        randomButton.setTextColor(surface);
        back_relative.setBackgroundColor(Color.argb(0x55,Color.red(surface),Color.green(surface),Color.blue(surface)));
        if(bitmap!=null) {
            backArtView.setImageBitmap(bitmap);
            artView.setImageBitmap(bitmap);
        }
        new loadSong().execute();
       return rootView;
    }
    private void setupToolbar() {

        ((AppCompatActivity) getActivity()).setSupportActionBar(toolbar);

        final ActionBar ab = ((AppCompatActivity) getActivity()).getSupportActionBar();
        ab.setDisplayShowTitleEnabled(false);
        ab.setDisplayHomeAsUpEnabled(true);
    }
    private void setUpDetail() {

    }

    private class loadSong extends AsyncTask<Void,Void,Void> {
        @Override
        protected void onPostExecute(Void aVoid) {
         recyclerView.setAdapter(songListAdapter);
         recyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));

         titleView.setText(Title);
         artistView.setText(Artist);
            collapsingToolbarLayout.setTitle(Title);
        }

        @Override
        protected Void doInBackground(Void... voids) {
           // if(type==ListType.PLAYLIST) {
                arraylist = SmallPlaylistAdapter.getPlaylistWithListID(getActivity(), position,playlist.id);
                if(bitmap==null)
                new loadArtwork().execute();
           // }
            Title = playlist.name;
            Artist = "Various Artist";
            songListAdapter = new SmallSongListAdapter((AppCompatActivity) getActivity(), arraylist, false, false);
          return null;
        }
    }
    private class loadArtwork extends AsyncTask<Void,Void,Void> {
        @Override
        protected void onPostExecute(Void aVoid) {
            backArtView.setImageBitmap(bitmap);
            artView.setImageBitmap(bitmap);
        }

        @Override
        protected Void doInBackground(Void... voids) {
            bitmap = AutoGeneratedPlaylistBitmap.getBitmap(getActivity(),arraylist,false,false);
            return null;
        }
    }

}
