package com.ldt.musicr.ui.navigation;

import android.app.Activity;
import android.content.Context;
import android.graphics.Bitmap;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.design.widget.CollapsingToolbarLayout;
import android.support.v4.widget.SwipeRefreshLayout;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.widget.ImageView;
import android.widget.TextView;

import com.ldt.musicr.loader.LastAddedLoader;
import com.ldt.musicr.loader.SongLoader;
import com.ldt.musicr.loader.TopTracksLoader;
import com.ldt.musicr.ui.navigation.library.SongAdapter;
import com.ldt.musicr.ui.widget.fragmentnavigationcontroller.PresentStyle;
import com.ldt.musicr.ui.widget.fragmentnavigationcontroller.SupportFragment;
import com.ldt.musicr.util.AutoGeneratedPlaylistBitmap;
import com.ldt.musicr.R;
import com.ldt.musicr.ui.BaseActivity;
import com.ldt.musicr.loader.PlaylistSongLoader;
import com.ldt.musicr.services.MusicStateListener;
import com.ldt.musicr.model.Playlist;
import com.ldt.musicr.model.Song;
import com.ldt.musicr.ui.widget.BlurImageViewChildConstraintLayout;

import java.util.ArrayList;
import java.util.List;

import butterknife.BindView;
import butterknife.ButterKnife;
import butterknife.OnClick;
import butterknife.OnTouch;

public class PlaylistPagerFragment extends SupportFragment implements MusicStateListener {
    private static final String TAG ="PlaylistPagerFragment";

    @Override
    public int getPresentTransition() {
        return PresentStyle.ACCORDION_LEFT;
    }

    @BindView(R.id.play_all_button) TextView playAllButton;
    @BindView(R.id.shuffle_play_button) TextView randomButton;

    @BindView(R.id.more_playlist) View mMoreButton;

    @BindView(R.id.playlist_big_rv) RecyclerView mRecyclerView;

    @BindView(R.id.art) ImageView mImage;
    @BindView(R.id.title) TextView mTitle;
    @BindView(R.id.artist) TextView mArtist;

    @BindView(R.id.toolbar) Toolbar toolbar;

    @BindView(R.id.background_constraint)
    BlurImageViewChildConstraintLayout back_constraint;
    @BindView(R.id.playlist_pager_collapsing_toolbar) CollapsingToolbarLayout collapsingToolbarLayout;
    @BindView(R.id.play_option_panel) View mPlayOptionPanel;

    @BindView(R.id.swipe_refresh)
    SwipeRefreshLayout mSwipeRefresh;

    SongAdapter mAdapter;

    Playlist mPlaylist;
    @OnClick(R.id.play_all_panel)
    void playAll() {
    mAdapter.playAll();
    }

    @OnTouch(R.id.art)
    boolean onTouchArt(View view, MotionEvent event) {
        if(event.getAction()==MotionEvent.ACTION_DOWN) {
           return false;

        }
        return false;
    }

    @OnClick(R.id.shuffle_play_button)
    void playRandom() {

        mAdapter.shuffle();
    }

    @Override
    public void restartLoader() {

    }

    @Override
    public void onPlaylistChanged() {

    }

    @Override
    public void onMetaChanged() {

    }

    Bitmap mPreviewBitmap;

    public static PlaylistPagerFragment newInstance(Context context,Playlist playlist,@Nullable Bitmap previewBitmap) {
        PlaylistPagerFragment fragment = new PlaylistPagerFragment();
        fragment.mPlaylist = playlist;
        fragment.mPreviewBitmap = previewBitmap;
        fragment.mPreviewList = getPlaylistWithListId(context,playlist);
        return fragment;
    }
    private List<Song> mPreviewList;


    private int[] getRelativePosition(View v) {
        int[] locationInScreen = new int[2]; // view's position in scrren
        int[] parentLocationInScreen = new int[2]; // parent view's position in screen
        v.getLocationOnScreen(locationInScreen);
        View parentView = (View)v.getParent();
        parentView.getLocationOnScreen(parentLocationInScreen);
        float relativeX = locationInScreen[0] - parentLocationInScreen[0];
        float relativeY = locationInScreen[1] - parentLocationInScreen[1];
        return new int[]{(int) relativeX, (int) relativeY};
    }

    @Override
    public void onDestroyView() {
        if(mLoadPlaylist!=null) mLoadPlaylist.cancel();
        super.onDestroyView();
    }

    @Override
    public void onPause() {
        Activity a = getActivity();
        if(a instanceof BaseActivity)
        ((BaseActivity)getActivity()).removeMusicStateListener(this);

        super.onPause();
    }

    @Override
    public void onResume() {
        super.onResume();

        Activity a = getActivity();
        if(a instanceof BaseActivity)
            ((BaseActivity)getActivity()).addMusicStateListener(this);
    }




    @Nullable
    @Override
    protected View onCreateView(LayoutInflater inflater, ViewGroup container) {
        return inflater.inflate(R.layout.playlist_page,container,false);
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        ButterKnife.bind(this,view);

        mAdapter = new SongAdapter(getActivity());
        mRecyclerView.setAdapter(mAdapter);
        if(mPreviewList!=null) mAdapter.setData(mPreviewList);
        mPreviewList =null;
        mRecyclerView.setLayoutManager(new LinearLayoutManager(getContext(),LinearLayoutManager.VERTICAL,false));

      //  back_constraint.setShadowDeltaRect((int)oneDp*6,(int)oneDp*4,(int)-oneDp*6,(int)oneDp*4);
       // back_constraint.setShadowDeltaRect(0,0,0,0);

        setupToolbar();
//
//        int surface = Tool.getBaseColor();
//        int heavy_surface = Tool.getHeavyColor();
//        mTitle.setTextColor(surface);
//        mArtist.setTextColor(surface);
//
//        randomButton.setTextColor(surface);
//        playAllButton.setIconColor(surface);
//        playAllButton.setTextColor(surface);

        if(mPreviewBitmap !=null) {
            mImage.setImageBitmap(mPreviewBitmap);
            back_constraint.setBitmapImage(mPreviewBitmap);
            mPreviewBitmap = null;
        }
        setName();
        mSwipeRefresh.setColorSchemeResources(R.color.FlatOrange);
        mSwipeRefresh.setOnRefreshListener(this::refreshData);

    }
    public static List<Song> getPlaylistWithListId(@NonNull Context context, Playlist list) {

        if(list.name.equals(context.getString(R.string.playlist_last_added))) return LastAddedLoader.getLastAddedSongs(context);
        else if(list.name.equals(context.getString(R.string.playlist_recently_played))) {
            TopTracksLoader recentloader = new TopTracksLoader(context,TopTracksLoader.QueryType.RecentSongs);
            return SongLoader.getSongsForCursor(TopTracksLoader.getCursor());
        } else if(list.name.equals(context.getString(R.string.playlist_top_tracks))) {
            TopTracksLoader topTracksLoader = new TopTracksLoader(context,TopTracksLoader.QueryType.TopTracks);
            return SongLoader.getSongsForCursor(TopTracksLoader.getCursor());
        } else
        return PlaylistSongLoader.getSongsInPlaylist(context, list.id);
    }
    private void setName() {
        mTitle.setText(mPlaylist.name);
        List<Song> songs = mAdapter.getData();
        ArrayList<String> names = new ArrayList<>();
        for(int i=0;i<songs.size()&&names.size()<5;i++) {
            Song song = songs.get(i);
            if(!names.contains(song.artistName)) names.add(song.artistName);
        }

       mArtist.setText(TextUtils.join(", ", names));
    }

    private void refreshData() {
        mSwipeRefresh.setRefreshing(true);
        mSwipeRefresh.post(() -> {
            if(mLoadPlaylist!=null) mLoadPlaylist.cancel();
            mLoadPlaylist = new loadPlaylist(PlaylistPagerFragment.this);
            mLoadPlaylist.execute();
        });
    };

    @Override
    public void onSetStatusBarMargin(int value) {
        ((ViewGroup.MarginLayoutParams)toolbar.getLayoutParams()).topMargin = value;
        toolbar.requestLayout();
        int padding_top_back_constraint = (int) (56*getResources().getDimension(R.dimen.oneDP) + 2*value);

        ((ViewGroup.MarginLayoutParams)mPlayOptionPanel.getLayoutParams()).topMargin = value;
        back_constraint.setPadding(back_constraint.getPaddingLeft(),padding_top_back_constraint,back_constraint.getPaddingRight(), 0);

    }

    private void setupToolbar() {
        if(getActivity() instanceof AppCompatActivity) {
            ((AppCompatActivity) getActivity()).setSupportActionBar(toolbar);

            ActionBar ab = ((AppCompatActivity) getActivity()).getSupportActionBar();
            if (ab != null) {
                ab.setDisplayHomeAsUpEnabled(true);
                ab.setDisplayShowHomeEnabled(true);
                ab.setDisplayShowTitleEnabled(false);
            }
        }
    }
    public static void animateAndChangeImageView(Context c, final ImageView v, final Bitmap new_image) {
        final Animation anim_out = AnimationUtils.loadAnimation(c, android.R.anim.fade_out);
        final Animation anim_in  = AnimationUtils.loadAnimation(c, android.R.anim.fade_in);
        anim_out.setAnimationListener(new Animation.AnimationListener()
        {
            @Override public void onAnimationStart(Animation animation) {}
            @Override public void onAnimationRepeat(Animation animation) {}
            @Override public void onAnimationEnd(Animation animation)
            {
                v.setImageBitmap(new_image);
                anim_in.setAnimationListener(new Animation.AnimationListener() {
                    @Override public void onAnimationStart(Animation animation) {}
                    @Override public void onAnimationRepeat(Animation animation) {}
                    @Override public void onAnimationEnd(Animation animation) {}
                });
                v.startAnimation(anim_in);
            }
        });
        v.startAnimation(anim_out);
    }
    private loadPlaylist mLoadPlaylist;

    private static class loadPlaylist extends AsyncTask<Void, Void, List<Song>> {
        PlaylistPagerFragment mFragment;
        private loadArtwork mLoadArtwork;

        loadPlaylist(PlaylistPagerFragment fragment) {
            mFragment = fragment;
        }

        @Override
        protected void onPostExecute(List<Song> songs) {
            if(mFragment!=null) {
                mFragment.mAdapter.setData(songs);
                mFragment.setName();
                if(mLoadArtwork!=null) mLoadArtwork.cancel();
                mLoadArtwork= new loadArtwork(mFragment);
                mLoadArtwork.execute();
                mFragment.mSwipeRefresh.setRefreshing(false);
                mFragment.mLoadPlaylist = null;
            }
        }

        @Override
        protected List<Song> doInBackground(Void... voids) {
            if(mFragment==null) return null;
            Context context = mFragment.getContext();
            if(context==null) return null;
           return getPlaylistWithListId(mFragment.getContext(),mFragment.mPlaylist);
        }

        public void cancel() {
            if(mLoadArtwork!=null) mLoadArtwork.cancel();
            cancel(true);
            mFragment = null;

        }
    }

    private static class loadArtwork extends AsyncTask<Void,Void,Bitmap> {
        PlaylistPagerFragment mFragment;
        loadArtwork(PlaylistPagerFragment fragment) {
            mFragment = fragment;
        }
        public void cancel() {
            cancel(true);
            mFragment = null;
        }

        @Override
        protected Bitmap doInBackground(Void... voids) {
            if(mFragment==null) return null;
            return AutoGeneratedPlaylistBitmap.getBitmap(mFragment.getContext(),mFragment.mAdapter.getData(),false,false);
        }
        @Override
        protected void onPostExecute(Bitmap bitmap) {
            if(mFragment!=null) {
                mFragment.mImage.setImageBitmap(bitmap);
                //animateAndChangeImageView(mFragment.getContext(),mFragment.mImage,bitmap);
                mFragment.back_constraint.setBitmapImage(bitmap);

                mFragment = null;
            }
        }


    }

}
